= Structural selections for Kakoune

kak-tree is a plugin for Kakoune which enables selection of syntax tree nodes. Parsing is performed with https://github.com/tree-sitter/tree-sitter[tree-sitter].

Status: proof of concept, API and overall development direction could change drastically based on feedback.

== Installation

Replace `"rust javascript"` with a list of languages you need. Or use `all` to build all supported
languages. Note that `all` build takes a long time, and resulting binary is quite fat which could
have a negative impact on responsiveness.

----
git clone --recurse-submodules
cargo build --release --features "rust javascript"
cargo install
cp rc/tree.kak ~/.config/kak/autoload/
----

Look at `Cargo.toml` for a full list of supported languages.

It is possible to check programmaticaly if kak-tree was built with support for a given filetype:

----
kak-tree --do-you-understand rust
----

If language is supported then exit code is 0 otherwise it's non-zero (1 at the moment, but it is not
guaranteed in future).

== Usage

NOTE: "The deepest enclosing node" means the one which matters. It means that node is named (does
have name in the language grammar definition) and is either whitelisted (if whitelist is defined)
or not blacklisted (if blacklist is defined). See Configuration section to learn more about
white/blacklisting.

[cols=2*]
|===
| tree-select-parent-node
| Extend selections to the deepest enclosing nodes. If any selection is equal to node range, then
extend to one's parent range.

| tree-select-next-node
| Select the deepest enclosing nodes' next siblings.

| tree-select-prev-node
| Select the deepest enclosing nodes' previous siblings.

| tree-node-sexp
| Show info box with a syntax tree of the deepest enclosing node of the main selection. This time
"deepest" means "deepest", including anonymous and blacklisted nodes, without any filter applied.

| tree-select-first-child
| Find the deepest enclosing nodes of selections and then select each node's first child. If node
has no children then keep selection on node.

| tree-select-children
| Find the deepest enclosing nodes of selections and then select each node's children. If node has
no children then keep selection on node.

| tree-select-kind <KIND>
| Selects all the KIND nodes wholly contained within an existing selection.

| tree-select-parent-kind <KIND>
| Select the closest ancestors of KIND of selections' deepest enclosing nodes. If any of selections
don't have such ancestor, remove that selection.

|===

More commands to come.

== Configuration

kak-tree supports configuration via a configuration file. As for now there is no default path to
load the configuration file, and it must be given using CLI option `--config` or `-c` for short:

----
set global tree_cmd 'kak-tree -c /path/to/kak-tree.toml'
----

=== Filetype configuration

Configuration for specific filetypes should be provided like this:

----
[filetype.rust]
blacklist = ["identifier", "scoped_identifier", "string_literal"]
whitelist = ["function_item"]
----

If `whitelist` array is provided then kak-tree selection will skip nodes which kinds are not whitelisted.
If `blacklist` array is provided then kak-tree selection will skip nodes which kinds are blacklisted.

WARNING: `whitelist` takes precedence over `blacklist`. In the example above kak-tree would expand
selection up to the function definition, ignoring other node kinds.

NOTE: `tree-node-sexp` command is useful for exploring node kinds which appear in the specific code.

Whitelisting or blacklisting node kinds could be tedious as tree-sitter parsers define many of them,
but it also could be rewarding as you will be able to quickly modify selection in scopes which matter for you with fewer keystrokes.

== License

For kak-tree see UNLICENSE file. For tree-sitter and its parsers look at their repositories.
